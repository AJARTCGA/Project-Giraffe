#version 150
#define MAX_LIGHTS 8
struct Light{
    vec3 position;
    vec3 color;
};
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform Light lights[MAX_LIGHTS];
uniform vec3 eyePos;
uniform sampler2D diffuse_texture;
uniform vec3 skyColor;

in vec2 v_texcoord;
in vec3 v_normal;
in vec3 v_pw;

in float visibility;
out vec4 color;
in float true_z;

const float levels = 4;

void main(){
    vec4 tc = texture(diffuse_texture,v_texcoord);
    vec3 N = normalize(v_normal);
    vec3 V = normalize(eyePos - v_pw);


    //insert light stuff
//This is for multiple lights be sure to include the cell shading stuff as well 
//when we place more light sources
    
    vec3 lightsum = vec3(0,0,0);
    for(int i=0;i<MAX_LIGHTS;++i)
    {
           vec3 L = normalize( lights[i].position - v_pw );
           float dp = clamp( dot(L,N), 0.0, 1.0 );

	float Ldist = length(L);
	L = 1.0/Ldist * L;
	vec3 R = reflect(-L,N);
	
	dp = floor(levels*dp)/levels;

float sp = dot(V,R);
	sp *= sign(dp);
	sp = pow(sp,32.0); 
	sp = clamp(sp,0.0,1.0);
sp = floor(levels*sp)/levels;
	

        lightsum += (dp * lights[i].color)+(sp * lights[i].color*.1);
    }




    
    color = vec4(lightsum*tc.rgb,tc.a);// + vec3(sp),tc.a);
    color = mix(vec4(skyColor,1),color,visibility);
}

